From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Sparky983 <87631423+Sparky983@users.noreply.github.com>
Date: Tue, 27 Sep 2022 12:20:52 +1000
Subject: [PATCH] fix: implement api


diff --git a/build.gradle.kts b/build.gradle.kts
index 0282e3b75470e1a68ea1fc228082483514ba432e..6ce0033a8c4cf9a8d8a25bd85629263fb4822bef 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -11,6 +11,7 @@ plugins {
 dependencies {
     implementation(project(":paper-api"))
     implementation(project(":paper-mojangapi"))
+    implementation(project(":embeddedpaper-api"))
     // Paper start
     implementation("org.jline:jline-terminal-jansi:3.21.0")
     implementation("net.minecrell:terminalconsoleappender:1.3.0")
diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index 8379c6313f06ab3eeaf02bad41d8b835d50e093f..ced7cfc2dc2dbb6724f1a1d275756b03243412dc 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -56,13 +56,15 @@ public class PaperConfig {
     public static void init(File configFile) {
         CONFIG_FILE = configFile;
         config = new YamlConfiguration();
-        try {
+        // EmbeddedPaper start
+        /* try {
             config.load(CONFIG_FILE);
         } catch (IOException ex) {
         } catch (InvalidConfigurationException ex) {
             Bukkit.getLogger().log(Level.SEVERE, "Could not load paper.yml, please correct your syntax errors", ex);
             throw Throwables.propagate(ex);
-        }
+        } */
+        // EmbeddedPaper end
         config.options().header(HEADER);
         config.options().copyDefaults(true);
         verbose = getBoolean("verbose", false);
@@ -144,7 +146,8 @@ public class PaperConfig {
                 }
             }
         }
-        saveConfig();
+        // EmbeddedPaper
+        // saveConfig();
     }
 
     static void saveConfig() {
@@ -339,7 +342,8 @@ public class PaperConfig {
         if (val instanceof Boolean) {
             SpigotConfig.disablePlayerDataSaving = !(Boolean) val;
             SpigotConfig.config.set("players.disable-saving", SpigotConfig.disablePlayerDataSaving);
-            SpigotConfig.save();
+            // EmbeddedPaper start
+            // SpigotConfig.save();
             config.set("settings.save-player-data", null);
         }
     }
@@ -349,7 +353,8 @@ public class PaperConfig {
         if (val instanceof Boolean bool && !bool) {
             SpigotConfig.logNamedDeaths = false;
             SpigotConfig.config.set("settings.log-named-deaths", false);
-            SpigotConfig.save();
+            // EmbeddedPaper start
+            // SpigotConfig.save();
         }
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index 1fa17557091e430559ed7645090b26a0bcb2c8fc..a33d0a89e4bcc2e57d9095e6d7b03767578bcba6 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -73,7 +73,8 @@ public class PaperWorldConfig {
         }
 
         if (needsSave) {
-            saveConfig();
+            // EmbeddedPaper
+            // saveConfig();
         }
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/VersionHistoryManager.java b/src/main/java/com/destroystokyo/paper/VersionHistoryManager.java
index aac3f66cb23d260729c2a48d8710a9de2346aa22..09bd9d3e16f4d2c74d7c81125bc00282393b1352 100644
--- a/src/main/java/com/destroystokyo/paper/VersionHistoryManager.java
+++ b/src/main/java/com/destroystokyo/paper/VersionHistoryManager.java
@@ -29,7 +29,8 @@ public enum VersionHistoryManager {
     private VersionData currentData = null;
 
     VersionHistoryManager() {
-        final Path path = Paths.get("version_history.json");
+        // EmbeddedPaper start - remove version history file
+        /* final Path path = Paths.get("version_history.json");
 
         if (Files.exists(path)) {
             // Basic file santiy checks
@@ -71,7 +72,10 @@ public enum VersionHistoryManager {
             // oldVersion is null
             currentData.setCurrentVersion(Bukkit.getVersion());
             writeFile(path);
-        }
+        } */
+        currentData = new VersionData();
+        currentData.setCurrentVersion(Bukkit.getVersion());
+        // EmbeddedPaper end
     }
 
     private void writeFile(@Nonnull final Path path) {
diff --git a/src/main/java/io/github/sparky983/embeddedpaper/EmbeddedDedicatedServer.java b/src/main/java/io/github/sparky983/embeddedpaper/EmbeddedDedicatedServer.java
new file mode 100644
index 0000000000000000000000000000000000000000..f88c23e7b43a815ec28ad1048eccfb0a90616bf4
--- /dev/null
+++ b/src/main/java/io/github/sparky983/embeddedpaper/EmbeddedDedicatedServer.java
@@ -0,0 +1,49 @@
+package io.github.sparky983.embeddedpaper;
+
+import com.mojang.authlib.GameProfileRepository;
+import com.mojang.authlib.minecraft.MinecraftSessionService;
+import com.mojang.datafixers.DataFixer;
+import com.mojang.serialization.DynamicOps;
+
+import net.minecraft.nbt.Tag;
+import net.minecraft.server.WorldStem;
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.dedicated.DedicatedServerSettings;
+import net.minecraft.server.level.progress.ChunkProgressListenerFactory;
+import net.minecraft.server.packs.repository.PackRepository;
+import net.minecraft.server.players.GameProfileCache;
+import net.minecraft.world.level.DataPackConfig;
+import net.minecraft.world.level.storage.LevelStorageSource;
+
+import joptsimple.OptionSet;
+
+public class EmbeddedDedicatedServer extends DedicatedServer {
+    public EmbeddedDedicatedServer(final OptionSet options,
+        final DataPackConfig dataPackConfig,
+        final DynamicOps<Tag> registryOps,
+        final Thread thread,
+        final LevelStorageSource.LevelStorageAccess levelStorageAccess,
+        final PackRepository packRepository,
+        final WorldStem worldStem,
+        final DedicatedServerSettings serverSettings,
+        final DataFixer dataFixer,
+        final MinecraftSessionService sessionService,
+        final GameProfileRepository profileRepository,
+        final GameProfileCache userCache,
+        final ChunkProgressListenerFactory chunkProgressListenerFactory) {
+
+        super(options, dataPackConfig, registryOps, thread,
+            levelStorageAccess,
+            packRepository, worldStem, serverSettings, dataFixer,
+            sessionService, profileRepository, userCache, chunkProgressListenerFactory,
+            (server) -> new EmbeddedPlayerList(server, server.registryAccess(), server.playerDataStorage));
+    }
+
+    @Override
+    public boolean saveAllChunks(final boolean suppressLogs,
+                                 final boolean flush,
+                                 final boolean force) {
+
+        return false;
+    }
+}
diff --git a/src/main/java/io/github/sparky983/embeddedpaper/EmbeddedPaperServer.java b/src/main/java/io/github/sparky983/embeddedpaper/EmbeddedPaperServer.java
new file mode 100644
index 0000000000000000000000000000000000000000..04fb4b3a3e166301219f1121fca03464b9bb48c0
--- /dev/null
+++ b/src/main/java/io/github/sparky983/embeddedpaper/EmbeddedPaperServer.java
@@ -0,0 +1,392 @@
+package io.github.sparky983.embeddedpaper;
+
+import com.destroystokyo.paper.profile.PaperAuthenticationService;
+import com.google.common.base.Charsets;
+import com.google.common.io.Files;
+import com.mojang.authlib.AuthenticationService;
+import com.mojang.authlib.GameProfileRepository;
+import com.mojang.authlib.minecraft.MinecraftSessionService;
+import com.mojang.serialization.DynamicOps;
+
+import net.minecraft.CrashReport;
+import net.minecraft.SharedConstants;
+import net.minecraft.Util;
+import net.minecraft.commands.Commands;
+import net.minecraft.core.RegistryAccess;
+import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.Tag;
+import net.minecraft.resources.RegistryOps;
+import net.minecraft.server.Bootstrap;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.ReloadableServerResources;
+import net.minecraft.server.WorldStem;
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.dedicated.DedicatedServerSettings;
+import net.minecraft.server.level.progress.LoggerChunkProgressListener;
+import net.minecraft.server.packs.PackResources;
+import net.minecraft.server.packs.PackType;
+import net.minecraft.server.packs.repository.FolderRepositorySource;
+import net.minecraft.server.packs.repository.PackRepository;
+import net.minecraft.server.packs.repository.PackSource;
+import net.minecraft.server.packs.repository.ServerPacksSource;
+import net.minecraft.server.packs.resources.CloseableResourceManager;
+import net.minecraft.server.packs.resources.MultiPackResourceManager;
+import net.minecraft.server.players.GameProfileCache;
+import net.minecraft.util.ExceptionCollector;
+import net.minecraft.util.datafix.DataFixers;
+import net.minecraft.world.entity.npc.VillagerTrades;
+import net.minecraft.world.level.DataPackConfig;
+import net.minecraft.world.level.dimension.LevelStem;
+import net.minecraft.world.level.lighting.LayerLightEventListener;
+import net.minecraft.world.level.storage.LevelResource;
+import net.minecraft.world.level.storage.LevelStorageSource;
+import net.minecraft.world.level.storage.LevelSummary;
+
+import org.bukkit.Bukkit;
+import org.bukkit.potion.Potion;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.Proxy;
+import java.text.SimpleDateFormat;
+import java.util.List;
+
+import joptsimple.OptionParser;
+import joptsimple.OptionSet;
+
+/**
+ * An embedded paper server.
+ */
+final class EmbeddedPaperServer implements EmbeddedServer {
+
+    private final String ip;
+    private final int port;
+    private MinecraftServer server;
+
+    EmbeddedPaperServer(final @NotNull String ip, final int port) {
+
+        this.ip = ip;
+        this.port = port;
+    }
+
+    @Override
+    public int getPort() {
+
+        return port;
+    }
+
+    @Override
+    public void start() {
+
+        if (server != null) {
+            throw new IllegalStateException("Server is already running");
+        }
+
+        OptionParser optionParser = new OptionParser() {{
+//            accepts("config")
+//                .withRequiredArg()
+//                .ofType(File.class)
+//                .defaultsTo(new File("server.properties"));
+
+            accepts("plugins")
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File("./.embeddedpaper", "plugins"));
+
+            acceptsAll(List.of("host", "server-ip"))
+                .withRequiredArg()
+                .ofType(String.class)
+                .defaultsTo(ip)
+                .describedAs("Hostname or IP");
+
+            acceptsAll(List.of("world-dir", "universe", "world-container"))
+                .withRequiredArg()
+                .ofType(File.class);
+//                .defaultsTo(new File("./.embeddedpaper/"));
+
+            acceptsAll(List.of("w", "world", "level-name"), "World name")
+                .withRequiredArg()
+                .ofType(String.class)
+                .describedAs("World name");
+
+            acceptsAll(List.of("p", "port", "server-port"))
+                .withRequiredArg()
+                .ofType(Integer.class)
+                .defaultsTo(port)
+                .describedAs("Port");
+
+            acceptsAll(List.of("o", "online-mode"))
+                .withRequiredArg()
+                .ofType(Boolean.class)
+                .defaultsTo(false)
+                .describedAs("Authentication");
+
+            acceptsAll(List.of("s", "size", "max-players"))
+                .withRequiredArg()
+                .ofType(Integer.class)
+                .describedAs("Server size");
+
+            acceptsAll(List.of("d", "date-format"))
+                .withRequiredArg()
+                .ofType(SimpleDateFormat.class)
+                .describedAs("Log date format");
+
+            acceptsAll(List.of("log-pattern"))
+                .withRequiredArg()
+                .ofType(String.class)
+                .defaultsTo("server.log")
+                .describedAs("Log filename");
+
+            acceptsAll(List.of("log-limit"))
+                .withRequiredArg()
+                .ofType(Integer.class)
+                .defaultsTo(0)
+                .describedAs("Max log size");
+
+            acceptsAll(List.of("log-count"))
+                .withRequiredArg()
+                .ofType(Integer.class)
+                .defaultsTo(1)
+                .describedAs("Log count");
+
+            acceptsAll(List.of("log-append"))
+                .withRequiredArg()
+                .ofType(Boolean.class)
+                .defaultsTo(true)
+                .describedAs("Log append");
+
+            acceptsAll(List.of("log-strip-color"));
+
+            acceptsAll(List.of("forceUpgrade"));
+            acceptsAll(List.of("eraseCache"));
+
+            acceptsAll(List.of("nojline"));
+
+            acceptsAll(List.of("noconsole"));
+
+            acceptsAll(List.of("add-plugin", "add-extra-plugin-jar"))
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File[0])
+                .describedAs("Jar file");
+
+            accepts("server-name")
+                .withRequiredArg()
+                .ofType(String.class)
+                .defaultsTo("Unknown Server")
+                .describedAs("Name");
+        }};
+
+        tryPreloadClass("org.apache.logging.log4j.core.Core");
+        tryPreloadClass("org.apache.logging.log4j.core.appender.AsyncAppender");
+        tryPreloadClass("org.apache.logging.log4j.core.Appender");
+        tryPreloadClass("org.apache.logging.log4j.core.ContextDataInjector");
+        tryPreloadClass("org.apache.logging.log4j.core.Filter");
+        tryPreloadClass("org.apache.logging.log4j.core.ErrorHandler");
+        tryPreloadClass("org.apache.logging.log4j.core.LogEvent");
+        tryPreloadClass("org.apache.logging.log4j.core.Logger");
+        tryPreloadClass("org.apache.logging.log4j.core.LoggerContext");
+        tryPreloadClass("org.apache.logging.log4j.core.LogEventListener");
+        tryPreloadClass("org.apache.logging.log4j.core.AbstractLogEvent");
+        tryPreloadClass("org.apache.logging.log4j.message.AsynchronouslyFormattable");
+        tryPreloadClass("org.apache.logging.log4j.message.FormattedMessage");
+        tryPreloadClass("org.apache.logging.log4j.message.ParameterizedMessage");
+        tryPreloadClass("org.apache.logging.log4j.message.Message");
+        tryPreloadClass("org.apache.logging.log4j.message.MessageFactory");
+        tryPreloadClass("org.apache.logging.log4j.message.TimestampMessage");
+        tryPreloadClass("org.apache.logging.log4j.message.SimpleMessage");
+        tryPreloadClass("org.apache.logging.log4j.core.async.AsyncLogger");
+        tryPreloadClass("org.apache.logging.log4j.core.async.AsyncLoggerContext");
+        tryPreloadClass("org.apache.logging.log4j.core.async.AsyncQueueFullPolicy");
+        tryPreloadClass("org.apache.logging.log4j.core.async.AsyncLoggerDisruptor");
+        tryPreloadClass("org.apache.logging.log4j.core.async.RingBufferLogEvent");
+        tryPreloadClass("org.apache.logging.log4j.core.async.DisruptorUtil");
+        tryPreloadClass("org.apache.logging.log4j.core.async.RingBufferLogEventHandler");
+        tryPreloadClass("org.apache.logging.log4j.core.impl.ThrowableProxy");
+        tryPreloadClass("org.apache.logging.log4j.core.impl.ExtendedClassInfo");
+        tryPreloadClass("org.apache.logging.log4j.core.impl.ExtendedStackTraceElement");
+
+        OptionSet options = optionParser.parse();
+
+        SharedConstants.tryDetectVersion();
+        CrashReport.preload();
+
+        Bootstrap.bootStrap();
+        Bootstrap.validate();
+        Util.startTimerHackThread();
+        DedicatedServerSettings serverSettings = new DedicatedServerSettings(options);
+
+        serverSettings.forceSave();
+        File file = new File("./.embeddedpaper/");
+        /* if (options.has("universe")) {
+            file = (File) options.valueOf("universe"); // CraftBukkit
+        } else {
+            file = new File(".");
+        } */
+        File userCacheFile = new File(file, "profileCache.json");
+
+        AuthenticationService authenticationService = new PaperAuthenticationService(Proxy.NO_PROXY);
+        MinecraftSessionService sessionService =
+            authenticationService.createMinecraftSessionService();
+        GameProfileRepository profileRepository = authenticationService.createProfileRepository();
+        GameProfileCache profileCache = new EmptyGameProfileCache(profileRepository,
+            userCacheFile);
+
+        String s = "embedded_world";
+        LevelStorageSource convertable = LevelStorageSource.createDefault(file.toPath());
+        LevelStorageSource.LevelStorageAccess levelStorageAccess;
+        try {
+            levelStorageAccess = convertable.createAccess(s, LevelStem.OVERWORLD);
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+        LevelSummary levelSummary = levelStorageAccess.getSummary();
+
+        PackRepository packRepository = new PackRepository(PackType.SERVER_DATA,
+            new ServerPacksSource(),
+            new FolderRepositorySource(levelStorageAccess.getLevelPath(
+                LevelResource.DATAPACK_DIR).toFile(), PackSource.WORLD));
+
+        File bukkitDataPackFolder = new File(
+            levelStorageAccess.getLevelPath(LevelResource.DATAPACK_DIR).toFile(),
+            "bukkit");
+        if (!bukkitDataPackFolder.exists()) {
+            bukkitDataPackFolder.mkdirs();
+        }
+        File mcMeta = new File(bukkitDataPackFolder, "pack.mcmeta");
+        try {
+            Files.asCharSink(mcMeta, Charsets.UTF_8)
+                .write("{\n"
+                + "    \"pack\": {\n"
+                + "        \"description\": \"Data pack for resources provided by Bukkit "
+                + "plugins\",\n"
+                + "        \"pack_format\": " + SharedConstants.getCurrentVersion().getPackVersion() + "\n"
+                + "    }\n"
+                + "}\n");
+        } catch (IOException ex) {
+            throw new RuntimeException("Could not initialize Bukkit datapack", ex);
+        }
+
+        DataPackConfig dataPackConfig;
+        DynamicOps<Tag> dynamicOps;
+
+        WorldStem worldstem;
+
+        try {
+            WorldStem.InitConfig worldStemConfig = new WorldStem.InitConfig(packRepository,
+                Commands.CommandSelection.DEDICATED,
+                serverSettings.getProperties().functionPermissionLevel, false);
+
+            dataPackConfig = DataPackConfig.DEFAULT;
+
+            List<PackResources> list = worldStemConfig.packRepository().openAllSelected();
+            RegistryAccess.Writable writableRegistryAccess = RegistryAccess.builtinCopy();
+            RegistryAccess.Frozen frozenRegistryAccess = writableRegistryAccess.freeze();
+
+            CloseableResourceManager resourceManager =
+                new MultiPackResourceManager(PackType.SERVER_DATA, list);
+
+            dynamicOps = RegistryOps.createAndLoad(NbtOps.INSTANCE,
+                    writableRegistryAccess, resourceManager);
+
+            worldstem = new WorldStem(
+                resourceManager,
+                new ReloadableServerResources(
+                    frozenRegistryAccess,
+                    worldStemConfig.commandSelection(),
+                    worldStemConfig.functionCompilationLevel()
+                ),
+                frozenRegistryAccess,
+                null
+            );
+        } catch (Exception e) {
+            packRepository.close();
+            throw new RuntimeException(e);
+        }
+
+        worldstem.updateGlobals();
+
+        try {
+            Class.forName(VillagerTrades.class.getName());
+        } catch (ClassNotFoundException e) {
+            throw new RuntimeException(e);
+        }
+
+        server = MinecraftServer.spin(
+            (thread) -> {
+                EmbeddedDedicatedServer server = new EmbeddedDedicatedServer(options,
+                    dataPackConfig, dynamicOps, thread, levelStorageAccess,
+                    packRepository, worldstem, serverSettings,
+                    DataFixers.getDataFixer(), sessionService, profileRepository,
+                    profileCache, LoggerChunkProgressListener::new);
+
+                server.setPort(port);
+                return server;
+            });
+
+        while (!server.hasInitialized) {
+            Thread.onSpinWait();
+        }
+
+        tryPreloadClass("com.destroystokyo.paper.util.SneakyThrow");
+
+        tryPreloadClass("org.apache.commons.lang3.mutable.MutableBoolean");
+        tryPreloadClass("org.apache.commons.lang3.mutable.MutableInt");
+        tryPreloadClass("org.jline.terminal.impl.MouseSupport");
+        tryPreloadClass("org.jline.terminal.impl.MouseSupport$1");
+        tryPreloadClass("org.jline.terminal.Terminal$MouseTracking");
+        tryPreloadClass("co.aikar.timings.TimingHistory");
+        tryPreloadClass("co.aikar.timings.TimingHistory$MinuteReport");
+        tryPreloadClass("io.netty.channel.AbstractChannelHandlerContext");
+        tryPreloadClass("io.netty.channel.AbstractChannelHandlerContext$11");
+        tryPreloadClass("io.netty.channel.AbstractChannelHandlerContext$12");
+        tryPreloadClass("io.netty.channel.AbstractChannel$AbstractUnsafe$8");
+        tryPreloadClass("io.netty.util.concurrent.DefaultPromise");
+        tryPreloadClass("io.netty.util.concurrent.DefaultPromise$1");
+        tryPreloadClass("io.netty.util.internal.PromiseNotificationUtil");
+        tryPreloadClass("io.netty.util.internal.SystemPropertyUtil");
+        tryPreloadClass("org.bukkit.craftbukkit.scheduler.CraftScheduler");
+        tryPreloadClass("org.bukkit.craftbukkit.scheduler.CraftScheduler$1");
+        tryPreloadClass("org.bukkit.craftbukkit.scheduler.CraftScheduler$2");
+        tryPreloadClass("org.bukkit.craftbukkit.scheduler.CraftScheduler$3");
+        tryPreloadClass("org.bukkit.craftbukkit.scheduler.CraftScheduler$4");
+        tryPreloadClass("org.slf4j.helpers.MessageFormatter");
+        tryPreloadClass("org.slf4j.helpers.FormattingTuple");
+        tryPreloadClass("org.slf4j.helpers.BasicMarker");
+        tryPreloadClass("org.slf4j.helpers.Util");
+        tryPreloadClass("com.destroystokyo.paper.event.player.PlayerConnectionCloseEvent");
+        tryPreloadClass("com.destroystokyo.paper.event.entity.EntityRemoveFromWorldEvent");
+        // Minecraft, seen during saving
+        tryPreloadClass(LayerLightEventListener.DummyLightLayerEventListener.class.getName());
+        tryPreloadClass(LayerLightEventListener.class.getName());
+        tryPreloadClass(ExceptionCollector.class.getName());
+        // Paper end
+    }
+
+    private static void tryPreloadClass(String className) {
+
+        try {
+            Class.forName(className);
+        } catch (ClassNotFoundException ignored) {
+
+        }
+    }
+
+    @Override
+    public void stop() {
+
+        if (server == null) {
+            throw new IllegalStateException("Server is not running");
+        }
+
+        server.safeShutdown(true, false);
+        server = null;
+    }
+
+    @Override
+    public void close() {
+
+        stop();
+    }
+}
diff --git a/src/main/java/io/github/sparky983/embeddedpaper/EmbeddedPaperServerFactory.java b/src/main/java/io/github/sparky983/embeddedpaper/EmbeddedPaperServerFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..2bfdbe7928ed0787aa464e2a564e9fae49136514
--- /dev/null
+++ b/src/main/java/io/github/sparky983/embeddedpaper/EmbeddedPaperServerFactory.java
@@ -0,0 +1,19 @@
+package io.github.sparky983.embeddedpaper;
+
+import static io.github.sparky983.embeddedpaper.EmbeddedServer.MAX_PORT;
+import static io.github.sparky983.embeddedpaper.EmbeddedServer.MIN_PORT;
+
+import org.apache.commons.lang3.Validate;
+import org.jetbrains.annotations.NotNull;
+
+public class EmbeddedPaperServerFactory implements EmbeddedServerFactory {
+
+    @Override
+    public @NotNull EmbeddedServer create(final @NotNull String ip, final int port) {
+
+        Validate.notNull(ip, "ip cannot be null");
+        Validate.isTrue(port >= MIN_PORT || port <= MAX_PORT, "port is invalid");
+
+        return new EmbeddedPaperServer(ip, port);
+    }
+}
diff --git a/src/main/java/io/github/sparky983/embeddedpaper/EmbeddedPlayerList.java b/src/main/java/io/github/sparky983/embeddedpaper/EmbeddedPlayerList.java
new file mode 100644
index 0000000000000000000000000000000000000000..63e5389252a87a7dd01a0f7e0468b34f036182bc
--- /dev/null
+++ b/src/main/java/io/github/sparky983/embeddedpaper/EmbeddedPlayerList.java
@@ -0,0 +1,63 @@
+package io.github.sparky983.embeddedpaper;
+
+import com.mojang.authlib.GameProfile;
+
+import net.minecraft.core.RegistryAccess;
+import net.minecraft.server.dedicated.DedicatedPlayerList;
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.players.ServerOpList;
+import net.minecraft.server.players.ServerOpListEntry;
+import net.minecraft.world.level.storage.PlayerDataStorage;
+
+import org.jetbrains.annotations.NotNull;
+
+import java.io.File;
+
+public class EmbeddedPlayerList extends DedicatedPlayerList { // use DedicatedPlayerList over PlayerList because of internal casts
+
+    private final ServerOpList ops = new EmbeddedServerOpList(new File("."));
+    private final DedicatedServer server;
+
+    public EmbeddedPlayerList(final @NotNull DedicatedServer server,
+                              final @NotNull RegistryAccess.Frozen tracker,
+                              final @NotNull PlayerDataStorage saveHandler) {
+
+        super(server, tracker, saveHandler);
+        this.server = server;
+    }
+
+    @Override
+    public void loadAndSaveFiles() {
+
+        // no op
+    }
+
+    @Override
+    public void op(final @NotNull GameProfile profile) {
+
+        this.ops.remove(profile); // CraftBukkit - decompile error
+        ServerPlayer entityPlayer = this.getPlayer(profile.getId());
+
+        if (entityPlayer != null) {
+            this.sendPlayerPermissionLevel(entityPlayer);
+        }
+    }
+
+    @Override
+    public void deop(final @NotNull GameProfile profile) {
+
+        this.ops.add(new ServerOpListEntry(profile, this.server.getOperatorUserPermissionLevel(), this.ops.canBypassPlayerLimit(profile)));
+        ServerPlayer entityPlayer = this.getPlayer(profile.getId());
+
+        if (entityPlayer != null) {
+            this.sendPlayerPermissionLevel(entityPlayer);
+        }
+    }
+
+    @Override
+    public void reloadWhiteList() {
+
+        // no op
+    }
+}
diff --git a/src/main/java/io/github/sparky983/embeddedpaper/EmbeddedServerOpList.java b/src/main/java/io/github/sparky983/embeddedpaper/EmbeddedServerOpList.java
new file mode 100644
index 0000000000000000000000000000000000000000..201d425ce9953a7366be82098cb6523a25e06e1b
--- /dev/null
+++ b/src/main/java/io/github/sparky983/embeddedpaper/EmbeddedServerOpList.java
@@ -0,0 +1,26 @@
+package io.github.sparky983.embeddedpaper;
+
+import net.minecraft.server.players.ServerOpList;
+
+import java.io.File;
+import java.io.IOException;
+
+public class EmbeddedServerOpList extends ServerOpList {
+
+    public EmbeddedServerOpList(File file) {
+
+        super(file);
+    }
+
+    @Override
+    public void load() throws IOException {
+
+
+    }
+
+    @Override
+    public void save() throws IOException {
+
+
+    }
+}
diff --git a/src/main/java/io/github/sparky983/embeddedpaper/EmptyGameProfileCache.java b/src/main/java/io/github/sparky983/embeddedpaper/EmptyGameProfileCache.java
new file mode 100644
index 0000000000000000000000000000000000000000..cf6184f8fa0e99a166e9a46808cb82ffde16f838
--- /dev/null
+++ b/src/main/java/io/github/sparky983/embeddedpaper/EmptyGameProfileCache.java
@@ -0,0 +1,82 @@
+package io.github.sparky983.embeddedpaper;
+
+import com.mojang.authlib.Agent;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.GameProfileRepository;
+import com.mojang.authlib.ProfileLookupCallback;
+
+import net.minecraft.server.players.GameProfileCache;
+import net.minecraft.world.entity.player.Player;
+
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.File;
+import java.util.List;
+import java.util.Optional;
+import java.util.UUID;
+import java.util.concurrent.Executor;
+import java.util.concurrent.atomic.AtomicReference;
+import java.util.function.Consumer;
+
+public class EmptyGameProfileCache extends GameProfileCache {
+
+    private final GameProfileRepository profileRepository;
+
+    public EmptyGameProfileCache(final @NotNull GameProfileRepository profileRepository,
+                                 final @NotNull File cacheFile) {
+
+        super(profileRepository, cacheFile);
+        this.profileRepository = profileRepository;
+    }
+
+    @Override
+    public void add(final @NotNull GameProfile profile) {
+
+        // no op
+    }
+
+    @Override
+    public @Nullable GameProfile getProfileIfCached(final @NotNull String name) {
+
+        return null;
+    }
+
+    @Override
+    public @NotNull Optional<GameProfile> get(final @NotNull String name) {
+
+        final AtomicReference<GameProfile> profileReference = new AtomicReference<>();
+
+        profileRepository.findProfilesByNames(
+            new String[] { name },
+            Agent.MINECRAFT,
+            new ProfileLookupCallback() {
+                @Override
+                public void onProfileLookupSucceeded(final @NotNull GameProfile profile) {
+
+                    profileReference.set(profile);
+                }
+
+                @Override
+                public void onProfileLookupFailed(final @NotNull GameProfile profile, final @NotNull Exception exception) {
+
+                    profileReference.set(null);
+                }
+            }
+        );
+
+        return Optional.ofNullable(profileReference.get());
+    }
+
+    @Override
+    public @NotNull List<@NotNull GameProfileInfo> load() {
+
+        return List.of();
+    }
+
+    @Override
+    public void save(boolean asyncSave) {
+
+        // no op
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 1e0d261439255091a6f61485c0747231fbd5b1db..a1ba315cf042b5304601916e9477775afb87541b 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -31,6 +31,7 @@ import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.obfuscate.DontObfuscate;
 import net.minecraft.resources.RegistryOps;
+import net.minecraft.server.dedicated.DedicatedPlayerList;
 import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.server.dedicated.DedicatedServerProperties;
 import net.minecraft.server.dedicated.DedicatedServerSettings;
@@ -42,6 +43,7 @@ import net.minecraft.server.packs.repository.PackSource;
 import net.minecraft.server.packs.repository.RepositorySource;
 import net.minecraft.server.packs.repository.ServerPacksSource;
 import net.minecraft.server.players.GameProfileCache;
+import net.minecraft.server.players.PlayerList;
 import net.minecraft.util.Mth;
 import net.minecraft.util.datafix.DataFixers;
 import net.minecraft.util.profiling.jfr.Environment;
@@ -58,6 +60,8 @@ import org.slf4j.Logger;
 
 // CraftBukkit start
 import java.util.concurrent.atomic.AtomicReference;
+import java.util.function.Function;
+
 import net.minecraft.SharedConstants;
 
 public class Main {
@@ -262,8 +266,15 @@ public class Main {
             convertable_conversionsession.saveDataTag(iregistrycustom_dimension, savedata);
             */
             Class.forName(net.minecraft.world.entity.npc.VillagerTrades.class.getName());// Paper - load this sync so it won't fail later async
+
+            Function<DedicatedServer, PlayerList> playerListFunction = (server) ->
+                new DedicatedPlayerList(server, server.registryAccess(), server.playerDataStorage);
+            // EmbeddedPaper start - use player list function
+
             final DedicatedServer dedicatedserver = (DedicatedServer) MinecraftServer.spin((thread) -> {
-                DedicatedServer dedicatedserver1 = new DedicatedServer(optionset, config.get(), ops.get(), thread, convertable_conversionsession, resourcepackrepository, worldstem, dedicatedserversettings, DataFixers.getDataFixer(), minecraftsessionservice, gameprofilerepository, usercache, LoggerChunkProgressListener::new);
+                DedicatedServer dedicatedserver1 = new DedicatedServer(optionset, config.get(), ops.get(), thread, convertable_conversionsession, resourcepackrepository, worldstem, dedicatedserversettings, DataFixers.getDataFixer(), minecraftsessionservice, gameprofilerepository, usercache, LoggerChunkProgressListener::new, playerListFunction);
+
+            // EmbeddedPaper end
 
                 /*
                 dedicatedserver1.setSingleplayerName((String) optionset.valueOf(optionspec8));
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index da15a224b8b974e78b9d8d5f514229b3b2a5a63e..4458c307c09bab2c5c07f52c9cf16c8730ef6eeb 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -957,7 +957,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         if (!isSameThread()) {
             MinecraftServer.LOGGER.info("Stopping main thread (Ignore any thread death message you see! - DO NOT REPORT THREAD DEATH TO PAPER)");
             while (this.getRunningThread().isAlive()) {
+
+                // EmbeddedPaper - don't kill main thread
                 this.getRunningThread().stop();
+
                 try {
                     Thread.sleep(1);
                 } catch (InterruptedException e) {}
@@ -1158,10 +1161,13 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     // Paper End
     // Spigot End
 
+    public volatile boolean hasInitialized = false;
+
     protected void runServer() {
         try {
             long serverStartTime = Util.getNanos(); // Paper
             if (this.initServer()) {
+                hasInitialized = true;
                 this.nextTickTime = Util.getMillis();
                 this.status.setDescription(new TextComponent(this.motd));
                 this.status.setVersion(new ServerStatus.Version(SharedConstants.getCurrentVersion().getName(), SharedConstants.getCurrentVersion().getProtocolVersion()));
@@ -1432,7 +1438,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     public File getServerDirectory() {
-        return new File(".");
+        return (File) options.valueOf("universe");
     }
 
     protected void onServerCrash(CrashReport report) {}
@@ -1731,7 +1737,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             return stringbuilder.toString();
         });
         details.setDetail("World Generation", () -> {
-            return this.worldData.worldGenSettingsLifecycle().toString();
+            return String.valueOf(this.worldData.worldGenSettingsLifecycle());
         });
         if (this.serverId != null) {
             details.setDetail("Server Id", () -> {
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 257c94f7c1cb00c9a91ab82e311dfd8eca29c538..20d91f775bba5c17ed0379bdffa510c0065f70fd 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -20,6 +20,7 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
 import java.util.function.BooleanSupplier;
+import java.util.function.Function;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
 import net.minecraft.DefaultUncaughtExceptionHandler;
@@ -45,6 +46,7 @@ import net.minecraft.server.network.TextFilterClient;
 import net.minecraft.server.packs.repository.PackRepository;
 import net.minecraft.server.players.GameProfileCache;
 import net.minecraft.server.players.OldUsersConverter;
+import net.minecraft.server.players.PlayerList;
 import net.minecraft.server.rcon.RconConsoleSource;
 import net.minecraft.server.rcon.thread.QueryThreadGs4;
 import net.minecraft.server.rcon.thread.RconThread;
@@ -92,14 +94,18 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
     @Nullable
     private final Component resourcePackPrompt;
 
+    private final Function<DedicatedServer, PlayerList> playerListFunction;
+
     // CraftBukkit start - Signature changed
-    public DedicatedServer(joptsimple.OptionSet options, DataPackConfig datapackconfiguration, DynamicOps<Tag> registryreadops, Thread thread, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PackRepository resourcepackrepository, WorldStem worldstem, DedicatedServerSettings dedicatedserversettings, DataFixer datafixer, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, GameProfileCache usercache, ChunkProgressListenerFactory worldloadlistenerfactory) {
+    public DedicatedServer(joptsimple.OptionSet options, DataPackConfig datapackconfiguration, DynamicOps<Tag> registryreadops, Thread thread, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PackRepository resourcepackrepository, WorldStem worldstem, DedicatedServerSettings dedicatedserversettings, DataFixer datafixer, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, GameProfileCache usercache, ChunkProgressListenerFactory worldloadlistenerfactory,
+        Function<DedicatedServer, PlayerList> playerListFunction) {
         super(options, datapackconfiguration, registryreadops, thread, convertable_conversionsession, resourcepackrepository, worldstem, Proxy.NO_PROXY, datafixer, minecraftsessionservice, gameprofilerepository, usercache, worldloadlistenerfactory);
         // CraftBukkit end
         this.settings = dedicatedserversettings;
         this.rconConsoleSource = new RconConsoleSource(this);
         this.textFilterClient = TextFilterClient.createFromConfig(dedicatedserversettings.getProperties().textFilteringConfig);
         this.resourcePackPrompt = DedicatedServer.parseResourcePackPrompt(dedicatedserversettings);
+        this.playerListFunction = playerListFunction;
     }
 
     @Override
@@ -212,7 +218,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             this.setLocalIp(dedicatedserverproperties.serverIp);
         }
         // Spigot start
-        this.setPlayerList(new DedicatedPlayerList(this, this.registryHolder, this.playerDataStorage));
+        this.setPlayerList(playerListFunction.apply(this)); // EmbeddedPaper - use player list function
         org.spigotmc.SpigotConfig.init((java.io.File) options.valueOf("spigot-settings"));
         org.spigotmc.SpigotConfig.registerCommands();
         // Spigot end
@@ -475,7 +481,9 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
 
         hasFullyShutdown = true; // Paper
-        System.exit(this.abnormalExit ? 70 : 0); // CraftBukkit // Paper
+
+        // EmbeddedPaper - system exit annoys gradle
+        // System.exit(this.abnormalExit ? 70 : 0); // CraftBukkit // Paper
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerSettings.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerSettings.java
index 8d029ff40a35004ba6a9c5f5879444f46b2b60ac..e1fb049ff79c9ebabdb656d309a058ed399059ba 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerSettings.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerSettings.java
@@ -10,14 +10,17 @@ import joptsimple.OptionSet;
 
 public class DedicatedServerSettings {
 
-    private final Path source;
+    // private final Path source; EmbeddedPaper - server.properties in memory
     private DedicatedServerProperties properties;
 
     // CraftBukkit start
     public DedicatedServerSettings(OptionSet optionset) {
-        this.source = ((File) optionset.valueOf("config")).toPath();
-        this.properties = DedicatedServerProperties.fromFile(source, optionset);
         // CraftBukkit end
+
+        // EmbeddedPaper start - server.properties in memory
+        // this.source = ((File) optionset.valueOf("config")).toPath();
+        this.properties = new DedicatedServerProperties(new java.util.Properties(), optionset);
+        // EmbeddedPaper end
     }
 
     public DedicatedServerProperties getProperties() {
@@ -25,11 +28,12 @@ public class DedicatedServerSettings {
     }
 
     public void forceSave() {
-        this.properties.store(this.source);
+        // this.properties.store(this.source); EmbeddedPaper - server.properties in memory
     }
 
     public DedicatedServerSettings update(UnaryOperator<DedicatedServerProperties> applier) {
-        (this.properties = (DedicatedServerProperties) applier.apply(this.properties)).store(this.source);
+        this.properties = (DedicatedServerProperties) applier.apply(this.properties);
+            // .store(this.source); EmbeddedPaper - server.properties in memory
         return this;
     }
 }
diff --git a/src/main/java/net/minecraft/server/players/GameProfileCache.java b/src/main/java/net/minecraft/server/players/GameProfileCache.java
index 9259eeea54d77ddecf044edf80e0eca6cb95278f..5977f3e334c5ae12c611582cb7aca8da2b57b640 100644
--- a/src/main/java/net/minecraft/server/players/GameProfileCache.java
+++ b/src/main/java/net/minecraft/server/players/GameProfileCache.java
@@ -414,7 +414,8 @@ public class GameProfileCache {
         }
     }
 
-    private static class GameProfileInfo {
+    public // EmbeddedPaper - make public
+    static class GameProfileInfo {
 
         private final GameProfile profile;
         final Date expirationDate;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 8a248e34fce1e04de4460f98b7627df495c66af1..422c71318fe63e58a8e553851e3821476693aada 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -19,8 +19,6 @@ import io.netty.buffer.Unpooled;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import java.awt.image.BufferedImage;
 import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.nio.ByteBuffer;
@@ -241,7 +239,6 @@ import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
-import org.yaml.snakeyaml.error.MarkedYAMLException;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 
@@ -321,22 +318,28 @@ public final class CraftServer implements Server {
             this.getLogger().info("Console input is disabled due to --noconsole command argument");
         }
 
-        this.configuration = YamlConfiguration.loadConfiguration(this.getConfigFile());
+        // EmbeddedPaper start
+        this.configuration = YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/bukkit.yml"), Charsets.UTF_8));
+        /* this.configuration = YamlConfiguration.loadConfiguration(this.getConfigFile());
         this.configuration.options().copyDefaults(true);
-        this.configuration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/bukkit.yml"), Charsets.UTF_8)));
+        this.configuration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/bukkit.yml"), Charsets.UTF_8))); */
+        // EmbeddedPaper end
         ConfigurationSection legacyAlias = null;
         if (!this.configuration.isString("aliases")) {
             legacyAlias = this.configuration.getConfigurationSection("aliases");
             this.configuration.set("aliases", "now-in-commands.yml");
         }
-        this.saveConfig();
+        // EmbeddedPaper start
+        /* this.saveConfig();
         if (this.getCommandsConfigFile().isFile()) {
             legacyAlias = null;
-        }
-        this.commandsConfiguration = YamlConfiguration.loadConfiguration(this.getCommandsConfigFile());
-        this.commandsConfiguration.options().copyDefaults(true);
-        this.commandsConfiguration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/commands.yml"), Charsets.UTF_8)));
+        } */
+        this.commandsConfiguration = YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/commands.yml"), Charsets.UTF_8));
+        /* this.commandsConfiguration = YamlConfiguration.loadConfiguration(this.getCommandsConfigFile());
         this.saveCommandsConfig();
+        this.commandsConfiguration.options().copyDefaults(true);
+        this.commandsConfiguration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/commands.yml"), Charsets.UTF_8))); */
+        // EmbeddedPaper end
 
         // Migrate aliases from old file and add previously implicit $1- to pass all arguments
         if (legacyAlias != null) {
@@ -356,7 +359,7 @@ public final class CraftServer implements Server {
             }
         }
 
-        this.saveCommandsConfig();
+        // this.saveCommandsConfig(); EmbeddedPaper
         this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
         this.pluginManager.useTimings(this.configuration.getBoolean("settings.plugin-profiling"));
@@ -415,7 +418,7 @@ public final class CraftServer implements Server {
             if (!pluginFolder.exists()) {
                 pluginFolder.mkdirs();
             }
-            Plugin[] plugins = this.pluginManager.loadPlugins(pluginFolder, this.extraPluginJars());
+            Plugin[] plugins = this.pluginManager.loadEmbeddedPlugin(pluginFolder, null);
             // Paper end
             for (Plugin plugin : plugins) {
                 try {
@@ -926,8 +929,8 @@ public final class CraftServer implements Server {
     public void reload() {
         org.spigotmc.WatchdogThread.hasStarted = false; // Paper - Disable watchdog early timeout on reload
         this.reloadCount++;
-        this.configuration = YamlConfiguration.loadConfiguration(this.getConfigFile());
-        this.commandsConfiguration = YamlConfiguration.loadConfiguration(this.getCommandsConfigFile());
+        // this.configuration = YamlConfiguration.loadConfiguration(this.getConfigFile()); EmbeddedPaper
+        // this.commandsConfiguration = YamlConfiguration.loadConfiguration(this.getCommandsConfigFile());
 
         console.settings = new DedicatedServerSettings(console.options);
         DedicatedServerProperties config = console.settings.getProperties();
@@ -1066,7 +1069,8 @@ public final class CraftServer implements Server {
 
     @SuppressWarnings({ "unchecked", "finally" })
     private void loadCustomPermissions() {
-        File file = new File(this.configuration.getString("settings.permissions-file"));
+        // EmbeddedPaper start
+        /* File file = new File(this.configuration.getString("settings.permissions-file"));
         FileInputStream stream;
 
         try {
@@ -1108,7 +1112,8 @@ public final class CraftServer implements Server {
             } catch (IllegalArgumentException ex) {
                 this.getLogger().log(Level.SEVERE, "Permission in " + file + " was already defined", ex);
             }
-        }
+        } */
+        // EmbeddedPaper end
     }
 
     @Override
@@ -2800,7 +2805,8 @@ public final class CraftServer implements Server {
 
     @Override
     public boolean reloadCommandAliases() {
-        Set<String> removals = getCommandAliases().keySet().stream()
+        // EmbeddedPaper start - remove commands.yml file
+        /* Set<String> removals = getCommandAliases().keySet().stream()
                 .map(key -> key.toLowerCase(java.util.Locale.ENGLISH))
                 .collect(java.util.stream.Collectors.toSet());
         getCommandMap().getKnownCommands().keySet().removeIf(removals::contains);
@@ -2813,7 +2819,8 @@ public final class CraftServer implements Server {
             Bukkit.getLogger().log(Level.SEVERE, "Cannot load " + file, ex);
             return false;
         }
-        commandMap.registerServerAliases();
+        commandMap.registerServerAliases(); */
+        // EmbeddedPaper end
         return true;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/help/HelpYamlReader.java b/src/main/java/org/bukkit/craftbukkit/help/HelpYamlReader.java
index 74b49f4c1649c161c3c785be7708f5970989f7f3..bf00b31db0abdb3de97191d030a05b49832dc5d1 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/HelpYamlReader.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/HelpYamlReader.java
@@ -25,10 +25,11 @@ public class HelpYamlReader {
     public HelpYamlReader(Server server) {
         this.server = server;
 
-        File helpYamlFile = new File("help.yml");
-        YamlConfiguration defaultConfig = YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/help.yml"), Charsets.UTF_8));
+        // EmbeddedPaper start
+        // File helpYamlFile = new File("help.yml");
+        helpYaml = YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/help.yml"), Charsets.UTF_8));
 
-        try {
+        /* try {
             this.helpYaml = YamlConfiguration.loadConfiguration(helpYamlFile);
             this.helpYaml.options().copyDefaults(true);
             this.helpYaml.setDefaults(defaultConfig);
@@ -43,7 +44,8 @@ public class HelpYamlReader {
         } catch (Exception ex) {
             server.getLogger().severe("Failed to load help.yml. Verify the yaml indentation is correct. Reverting to default help.yml.");
             this.helpYaml = defaultConfig;
-        }
+        } */
+        // EmbeddedPaper end
     }
 
     /**
diff --git a/src/main/java/org/spigotmc/SpigotCommand.java b/src/main/java/org/spigotmc/SpigotCommand.java
index 3112a8695639c402e9d18710acbc11cff5611e9c..52633366327caeefd096c01b7fdeab9ae0d0c3d8 100644
--- a/src/main/java/org/spigotmc/SpigotCommand.java
+++ b/src/main/java/org/spigotmc/SpigotCommand.java
@@ -30,7 +30,10 @@ public class SpigotCommand extends Command {
             Command.broadcastCommandMessage(sender, ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
 
             MinecraftServer console = MinecraftServer.getServer();
-            org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings"));
+            
+            // EmbeddedPaper
+            // org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings"));
+
             for (ServerLevel world : console.getAllLevels()) {
                 world.spigotConfig.init();
             }
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index d509187ca63963fdd7f1a44d89d2aa1a1b1ce3bd..7c46cdc593ca018ad19dbfa100521be6bf310b60 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -54,7 +54,8 @@ public class SpigotConfig
     {
         SpigotConfig.CONFIG_FILE = configFile;
         SpigotConfig.config = new YamlConfiguration();
-        try
+        // EmbeddedPaper start
+        /* try
         {
             SpigotConfig.config.load( CONFIG_FILE );
         } catch ( IOException ex )
@@ -63,7 +64,8 @@ public class SpigotConfig
         {
             Bukkit.getLogger().log( Level.SEVERE, "Could not load spigot.yml, please correct your syntax errors", ex );
             throw Throwables.propagate( ex );
-        }
+        } */
+        // EmbeddedPaper end
 
         SpigotConfig.config.options().header( HEADER );
         SpigotConfig.config.options().copyDefaults( true );
@@ -121,7 +123,8 @@ public class SpigotConfig
             }
         }
         // Paper start
-        SpigotConfig.save();
+        // EmbeddedPaper start
+        // SpigotConfig.save();
     }
     public static void save() {
         // Paper end
diff --git a/src/main/resources/META-INF/services/io.github.sparky983.embeddedpaper.EmbeddedServerFactory b/src/main/resources/META-INF/services/io.github.sparky983.embeddedpaper.EmbeddedServerFactory
new file mode 100644
index 0000000000000000000000000000000000000000..cd61972d369c33d60e4c201a38f9151a401a0aa0
--- /dev/null
+++ b/src/main/resources/META-INF/services/io.github.sparky983.embeddedpaper.EmbeddedServerFactory
@@ -0,0 +1 @@
+io.github.sparky983.embeddedpaper.EmbeddedPaperServerFactory
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
index 74ccc67e3c12dc5182602fb691ef3ddeb5b53280..416b6a1a7cffa67a607a539e684989e3e71b2d30 100644
--- a/src/main/resources/log4j2.xml
+++ b/src/main/resources/log4j2.xml
@@ -14,21 +14,6 @@
                 </LoggerNamePatternSelector>
             </PatternLayout>
         </TerminalConsole>
-        <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz">
-            <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level]: [%logger] %paperMinecraftFormatting{%msg}{strip}%n%xEx{full}">
-                    <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
-                    <!-- Disable prefix for various plugins that bypass the plugin logger -->
-                    <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
-                                  pattern="[%d{HH:mm:ss}] [%t/%level]: %paperMinecraftFormatting{%msg}{strip}%n%xEx{full}" />
-                </LoggerNamePatternSelector>
-            </PatternLayout>
-            <Policies>
-                <TimeBasedTriggeringPolicy />
-                <OnStartupTriggeringPolicy />
-            </Policies>
-            <DefaultRolloverStrategy max="1000"/>
-        </RollingRandomAccessFile>
         <Async name="Async">
             <AppenderRef ref="rewrite"/>
         </Async>
